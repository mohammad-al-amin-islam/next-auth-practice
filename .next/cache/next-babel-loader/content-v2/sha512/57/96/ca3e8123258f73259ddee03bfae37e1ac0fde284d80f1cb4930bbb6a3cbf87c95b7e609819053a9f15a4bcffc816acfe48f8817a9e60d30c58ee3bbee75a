{"ast":null,"code":"import { getSession } from \"next-auth/client\";\nimport { checkPassword, hashPassword } from \"../../../lib/auth\";\nimport { dbConncect } from \"../../../lib/db\";\n\nasync function handler(req, res) {\n  if (req.method !== \"PATCH\") {\n    return;\n  }\n\n  const session = await getSession({\n    req: req\n  });\n\n  if (!session) {\n    res.status(422).json(\"Not authenticated user\");\n    return;\n  }\n\n  const userEmail = session.user.email;\n  const oldPassword = req.body.oldPassword;\n  const newPassword = req.body.newPassword;\n  const client = await dbConncect();\n  await client.connect();\n  const db = client.db(\"nextAuth\");\n  const collection = db.collection(\"loginInfo\");\n  const existEmail = await collection.findOne({\n    email: userEmail\n  });\n\n  if (!existEmail) {\n    res.status(201).json({\n      message: \"Email Not found\"\n    });\n    client.close();\n    return;\n  }\n\n  const hasedPassword = existEmail.password;\n  const verifyPassword = await checkPassword(oldPassword, hasedPassword);\n\n  if (!verifyPassword) {\n    res.status(403).json({\n      message: \"Old password given incorrect\"\n    });\n    return;\n  }\n\n  const newHassedPassword = await hashPassword(newPassword);\n  const updateResult = await collection.updateOne({\n    email: userEmail\n  }, {\n    $set: {\n      password: newHassedPassword\n    }\n  });\n  res.status(\"201\").json(updateResult);\n}\n\nexport default handler;","map":{"version":3,"sources":["D:/Udemy NextJS/auth-project/pages/api/profile/changePassword.js"],"names":["getSession","checkPassword","hashPassword","dbConncect","handler","req","res","method","session","status","json","userEmail","user","email","oldPassword","body","newPassword","client","connect","db","collection","existEmail","findOne","message","close","hasedPassword","password","verifyPassword","newHassedPassword","updateResult","updateOne","$set"],"mappings":"AAAA,SAASA,UAAT,QAA2B,kBAA3B;AACA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,mBAA5C;AACA,SAASC,UAAT,QAA2B,iBAA3B;;AAEA,eAAeC,OAAf,CAAuBC,GAAvB,EAA2BC,GAA3B,EAAgC;AAC9B,MAAID,GAAG,CAACE,MAAJ,KAAe,OAAnB,EAA4B;AAC1B;AACD;;AAED,QAAMC,OAAO,GAAG,MAAMR,UAAU,CAAC;AAAEK,IAAAA,GAAG,EAAEA;AAAP,GAAD,CAAhC;;AACA,MAAI,CAACG,OAAL,EAAc;AACZF,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,wBAArB;AACA;AACD;;AAED,QAAMC,SAAS,GAAGH,OAAO,CAACI,IAAR,CAAaC,KAA/B;AACA,QAAMC,WAAW,GAAGT,GAAG,CAACU,IAAJ,CAASD,WAA7B;AACA,QAAME,WAAW,GAAGX,GAAG,CAACU,IAAJ,CAASC,WAA7B;AAEA,QAAMC,MAAM,GAAG,MAAMd,UAAU,EAA/B;AACA,QAAMc,MAAM,CAACC,OAAP,EAAN;AAEA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,CAAU,UAAV,CAAX;AACA,QAAMC,UAAU,GAAGD,EAAE,CAACC,UAAH,CAAc,WAAd,CAAnB;AAEA,QAAMC,UAAU,GAAG,MAAMD,UAAU,CAACE,OAAX,CAAmB;AAAET,IAAAA,KAAK,EAAEF;AAAT,GAAnB,CAAzB;;AAEA,MAAI,CAACU,UAAL,EAAiB;AACff,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEa,MAAAA,OAAO,EAAE;AAAX,KAArB;AACAN,IAAAA,MAAM,CAACO,KAAP;AACA;AACD;;AAED,QAAMC,aAAa,GAAGJ,UAAU,CAACK,QAAjC;AAEA,QAAMC,cAAc,GAAG,MAAM1B,aAAa,CAACa,WAAD,EAAcW,aAAd,CAA1C;;AAEA,MAAI,CAACE,cAAL,EAAqB;AACnBrB,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEa,MAAAA,OAAO,EAAE;AAAX,KAArB;AACA;AACD;;AAED,QAAMK,iBAAiB,GAAG,MAAM1B,YAAY,CAACc,WAAD,CAA5C;AAEA,QAAMa,YAAY,GAAG,MAAMT,UAAU,CAACU,SAAX,CACzB;AAAEjB,IAAAA,KAAK,EAAEF;AAAT,GADyB,EAEzB;AAAEoB,IAAAA,IAAI,EAAE;AAAEL,MAAAA,QAAQ,EAAEE;AAAZ;AAAR,GAFyB,CAA3B;AAKAtB,EAAAA,GAAG,CAACG,MAAJ,CAAW,KAAX,EAAkBC,IAAlB,CAAuBmB,YAAvB;AACD;;AAED,eAAezB,OAAf","sourcesContent":["import { getSession } from \"next-auth/client\";\r\nimport { checkPassword, hashPassword } from \"../../../lib/auth\";\r\nimport { dbConncect } from \"../../../lib/db\";\r\n\r\nasync function handler(req,res) {\r\n  if (req.method !== \"PATCH\") {\r\n    return;\r\n  }\r\n\r\n  const session = await getSession({ req: req });\r\n  if (!session) {\r\n    res.status(422).json(\"Not authenticated user\");\r\n    return;\r\n  }\r\n\r\n  const userEmail = session.user.email;\r\n  const oldPassword = req.body.oldPassword;\r\n  const newPassword = req.body.newPassword;\r\n\r\n  const client = await dbConncect();\r\n  await client.connect();\r\n\r\n  const db = client.db(\"nextAuth\");\r\n  const collection = db.collection(\"loginInfo\");\r\n\r\n  const existEmail = await collection.findOne({ email: userEmail });\r\n\r\n  if (!existEmail) {\r\n    res.status(201).json({ message: \"Email Not found\" });\r\n    client.close();\r\n    return;\r\n  }\r\n\r\n  const hasedPassword = existEmail.password;\r\n\r\n  const verifyPassword = await checkPassword(oldPassword, hasedPassword);\r\n\r\n  if (!verifyPassword) {\r\n    res.status(403).json({ message: \"Old password given incorrect\" });\r\n    return;\r\n  }\r\n\r\n  const newHassedPassword = await hashPassword(newPassword);\r\n\r\n  const updateResult = await collection.updateOne(\r\n    { email: userEmail },\r\n    { $set: { password: newHassedPassword } }\r\n  );\r\n\r\n  res.status(\"201\").json(updateResult);\r\n}\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}